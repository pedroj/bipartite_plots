pp1
ggnet2(nch.net, color = "Fam")
nch_att$Family
get.vertex.attribute(nch.net,Fam)
list.network.attributes(nch.net)
list.node.attributes(nch.net)
list.vertex.attributes(nch.net)
network::list.vertex.attributes(nch.net)
network::list.vertex.attributes(nch.net)[1]
nch.net %v% "Fam"<- nch_att$Family
?%v%
nch.net %v% "Fam"= nch_att$Family
network::get.vertex.attribute(nch.net,Fam)add.edge()
network::get.vertex.attribute(nch.net,Fam)
network::list.vertex.attributes(nch.net)
nch.net %v% "Gen"= nch_att$Genus
network::list.vertex.attributes(nch.net)
nch.net %v% "BM"= nch_att$Body_mass
nch.net %v% "FrLen"= nch_att$Fruit_length
ggnet2(nch.net, color = "Fam")
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3)
pp1
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3,
palette("Set2"))
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3,
palette="Set2")
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3,
palette="Set4")
pp1<- ggnet2(nch.net, size= 6, color= "BM", label= T, label.size=3)
pp1
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3)
pp1
# The Nava de las Correhuelas dataset.
nch<- read.table("./data-raw/w96.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
## Node attributes, animals
nch_A<- read.table("./data-raw/w96_animal.csv",
header=T, sep=",",
dec=".", na.strings="NA")
## Node attributes, plants
nch_P<- read.table("./data-raw/w96_plant.csv",
header=T, sep=",",
dec=".", na.strings="NA")
# The Hato Raton dataset.
hr<- read.table("./data-raw/w97.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
## Node attributes, animals
hr_A<- read.table("./data-raw/w97_animal.csv",
header=T, sep=",",
dec=".", na.strings="NA")
## Node attributes, plants
hr_P<- read.table("./data-raw/w97_plant.csv",
header=T, sep=",",
dec=".", na.strings="NA")
glimpse(nch_A)
glimpse(nch_P)
glimpse(hr_A)
glimpse(hr_P)
source("./R/bip_init_network.R")
source("./R/bip_init_igraph.R")
# test.net<- bip_init_network(mymat)
# test.ig<- bip_init_igraph(mymat)
nch.net<- bip_init_network(nch)
nch.ig<- bip_init_igraph(nch)
hr.net<- bip_init_network(hr)
hr.ig<- bip_init_igraph(hr)
# Sourcing required functions and initializing the net objects.
source("./R/bip_igplot.R")
source("./R/bip_qtplot.R")
source("./R/bip_railway.R")
source("./R/vectorize.R")
source("./R/bip_edgewt.R")
# Plotting bipartite networks from adjacency matrix of two-mode network.
# Using ggnet.
# DATE: 15Jul2013. Updated to ggnet 11/11/2016.
#
require(ggnet)
require(ggrepel)
#
# test.net<- bip_init_network(mymat)
mynet<- nch.net
if(!is.network(nch.net)) stop("Must first initialize the network; use 'bip_init_network.R'.")
# Plot layout coordinates for railway networkplot. Input is the
# adjacency matrix.
#
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
bip_railway(mymat, label=T)
# Detect and color the mode
col= c("actor"= "grey80", "event"= "gold2")
ggnet2(mynet,
color= "mode", palette= col,
label= TRUE, label.size=3,
layout.exp= 0.25)        # Using layout.exp because of long labels
# Label weights directly into edges
bip= data.frame(P1= c(1, 12, 6, 0),
P2= c(1, 0, 4, 0),
P3= c(1, 7, 3, 12),
row.names= letters[1:4])
bip.net<- network(bip,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
ggnet2(bip.net,
color= "mode", palette = col,
label= TRUE, shape= "mode",
edge.label= "weights")
# Set colors for each mode
col= c("actor"= "#FC9272", "event"= "#9ECAE1")
pp<- ggnet2(hr.net, size=7,
shape= "mode", #label= T,
color= "mode", palette= col,
edge.size= bip_edgewt(hr, 5),
edge.alpha= 0.25,
layout.exp= 0.25) +
geom_text(aes(label= network.vertex.names(hr.net)),
color= "black", size= 3)
pp
pp1<- ggnet2(nch.net, size= 6, color= "mode", label= T, label.size=3,
palette= c("actor"= "indianred3", "event"= "steelblue4"))
pp1
pp2<- ggnet2(nch.net, size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
edge.size= bip_edgewt(nch, 7.5),
edge.alpha= 0.25,
layout.exp= 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5) + # check_overlap= TRUE
guides(color= FALSE)
pp2
nums<- as.vector(c(1:sum(dim(nch))))
pp3<- ggnet2(nch.net, size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
edge.size= bip_edgewt(nch, 7.5),
edge.alpha= 0.5,
layout.exp = 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= nums),
color= "white", size= 3.5, fontface="bold") +
guides(color= FALSE)
pp3
pp4<- ggnet2(nch.net, size= 7,
shape= "mode",
palette= "Set1",
color= "mode",
edge.size= bip_edgewt(nch, 7.5),
edge.alpha= 0.25,
layout.exp = 0.25) +
guides(color= FALSE) +
# This is how the check overlap option in ggnet2 goes.
# geom_text(aes(label= network.vertex.names(nch.net)),
#         color= "black", size= 3.5) + # check_overlap= TRUE
# This uses ggrepel.
geom_text_repel(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5)
pp4
sessionInfo()
colourpicker:::colourPickerAddin()
require(ggplot2)
require(network)
require(igraph)
require(sna)
require(ggnet)
require(ggrepel)
require(ergm)
require(intergraph)
require(RColorBrewer)
# Read data matrices.
# Read a network
# Creating the objects. Example input from the clipboard.
#
# Where data.txt has a weighted adjacency matrix, e.g.,:
Aa	Ab	Ac	Ba	Bb	Bc	Bd	Ca	Cb	Cc	Da
pp4<- ggnet2(nch.net, size= 7,
shape= "mode",
palette= "Set1",
color= "mode",
edge.size= bip_edgewt(nch, 7.5),
edge.alpha= 0.25,
layout.exp = 0.25) +
guides(color= FALSE) +
# This is how the check overlap option in ggnet2 goes.
# geom_text(aes(label= network.vertex.names(nch.net)),
#         color= "black", size= 3.5) + # check_overlap= TRUE
# This uses ggrepel.
geom_text_repel(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5)
pp4
library(ggbipart)
?ggbipart
library(ggbipart)
?ggbipart
>>>>>>> ggbipart
library(ggbipart)
detach (ggbipart)
library(ggbipart)
# Plot layout coordinates for railway networkplot. Input is the
# adjacency matrix.
#
mymat <- read.delim("./data/data.txt", row.names=1)   # Not run.
g<- bip_railway(mymat, label=T)
g+ coord_flip()
# Use this to copy from the clipboard, after select/copy the above block.
mymat <- read.table(pipe("pbpaste"), header= T, sep= "\t", row.names= 1)
mymat
library(ggbipart)
mymat <- read.table(pipe("pbpaste"), header= T, sep= "\t", row.names= 1)
metam<-mymat
dim(metam)[1]+dim(metam)[2]
# Getting a square matrix by transforming to canonical form.
dim(metam)
# Load package
library(networkD3); library(igraph); library(reshape2)
g3<- bip_init_igraph(metam)
table(V(g3)$type)
names(nch_attr)        # Datatset with node attributes
V(g3)$species <- as.character(nch_attr$species)
V(g3)$fam <- as.character(nch_attr$family)
V(g3)$spcode <- as.character(nch_attr$spcode)
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
V(g3)$genus<- as.character(nch_attr$genus)
V(g3)$bodymass<- nch_attr$w
V(g3)$frdiam_gape<- nch_attr$g
V(g3)$abund<- nch_attr$a
V(g3)$frugivory<- nch_attr$f
V(g3)$phenology<- nch_attr$ph
V(g3)$phen.forb<- nch_attr$pp
meta<- read.table("./data/sdw01_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
metam<-as.matrix(meta)
# Getting a square matrix by transforming to canonical form.
dim(metam)
dim(metam)[1]+dim(metam)[2]
g3<- bip_init_igraph(metam)
table(V(g3)$type)
names(nch_attr)        # Datatset with node attributes
V(g3)$species <- as.character(nch_attr$species)
V(g3)$fam <- as.character(nch_attr$family)
V(g3)$spcode <- as.character(nch_attr$spcode)
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
V(g3)$genus<- as.character(nch_attr$genus)
V(g3)$bodymass<- nch_attr$w
V(g3)$frdiam_gape<- nch_attr$g
V(g3)$abund<- nch_attr$a
V(g3)$frugivory<- nch_attr$f
V(g3)$phenology<- nch_attr$ph
V(g3)$phen.forb<- nch_attr$pp
# Convert igraph to list for networkD3
sj_list3 <- igraph_to_networkD3(g3)
sj_list3$nodes <- data.frame(sj_list3$nodes, data.frame(group=c(rep("Plant",26),rep("Animal",36))))
# Error: group must have the same number of rows as the number of nodes in g.
# Need to convert the strating adjacency matrix to a square matrix using the
# canonical form.
head(sj_list3)
# Plot as a forceDirected Network
#
a<-forceNetwork(Links= sj_list3$links,
Nodes = sj_list3$nodes,
Source = sj_list3$links$source,
Target = sj_list3$links$target,
NodeID = sj_list3$nodes$name,
# Nodes= sj_list3$nodes,
Group = sj_list3$nodes$group,
zoom= TRUE, linkDistance= 200, opacity= 1.6)
#colourScale = "d3.scale.category20f()")
a
# Plot as a forceDirected Network
#
a<-forceNetwork(Links= sj_list3$links,
Nodes = sj_list3$nodes,
Source = sj_list3$links$source,
Target = sj_list3$links$target,
NodeID = sj_list3$nodes$name,
# Nodes= sj_list3$nodes,
Group = sj_list3$nodes$group,
zoom= TRUE, linkDistance= 200, opacity= 1.6)
# Load package
library(networkD3); library(igraph); library(reshape2)
g3<- bip_init_igraph(metam)
table(V(g3)$type)
names(nch_attr)        # Datatset with node attributes
V(g3)$species <- as.character(nch_attr$species)
V(g3)$fam <- as.character(nch_attr$family)
V(g3)$spcode <- as.character(nch_attr$spcode)
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
V(g3)$genus<- as.character(nch_attr$genus)
V(g3)$bodymass<- nch_attr$w
V(g3)$frdiam_gape<- nch_attr$g
V(g3)$abund<- nch_attr$a
V(g3)$frugivory<- nch_attr$f
V(g3)$phenology<- nch_attr$ph
V(g3)$phen.forb<- nch_attr$pp
# Convert igraph to list for networkD3
sj_list3 <- igraph_to_networkD3(g3)
sj_list3$nodes <- data.frame(sj_list3$nodes, data.frame(group=c(rep("Plant",26),rep("Animal",36))))
# Error: group must have the same number of rows as the number of nodes in g.
# Need to convert the strating adjacency matrix to a square matrix using the
# canonical form.
head(sj_list3)
# Plot as a forceDirected Network
#
a<-forceNetwork(Links= sj_list3$links,
Nodes = sj_list3$nodes,
Source = sj_list3$links$source,
Target = sj_list3$links$target,
NodeID = sj_list3$nodes$name,
# Nodes= sj_list3$nodes,
Group = sj_list3$nodes$group,
zoom= TRUE, linkDistance= 200, opacity= 1.6)
library(ggbipart)
?`ggbipart-package`
library(ggbipart)
g3<- bip_init_igraph(metam)
g3
metam
library(ggbipart)
g3<- bip_init_igraph(metam)
# Load packages
require(ggbipart)
require(networkD3)
require(igraph)
require(reshape2)
meta<- read.table("./data/sdw01_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
metam<-as.matrix(meta)
# Getting a square matrix by transforming to canonical form.
dim(metam)
dim(metam)[1]+dim(metam)[2]
# ml<- list(metam,t(metam))
# mm<- bdiag(ml)
# row.names(mm)<- append(row.names(meta),colnames(meta))
# colnames(mm)<- append(row.names(meta),colnames(meta))
g3<- bip_init_igraph(metam)
table(V(g3)$type)
names(nch_attr)        # Datatset with node attributes
V(g3)$species <- as.character(nch_attr$species)
V(g3)$fam <- as.character(nch_attr$family)
V(g3)$spcode <- as.character(nch_attr$spcode)
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
V(g3)$genus<- as.character(nch_attr$genus)
V(g3)$bodymass<- nch_attr$w
V(g3)$frdiam_gape<- nch_attr$g
V(g3)$abund<- nch_attr$a
V(g3)$frugivory<- nch_attr$f
V(g3)$phenology<- nch_attr$ph
V(g3)$phen.forb<- nch_attr$pp
# Convert igraph to list for networkD3
sj_list3 <- igraph_to_networkD3(g3)
sj_list3$nodes <- data.frame(sj_list3$nodes, data.frame(group=c(rep("Plant",26),rep("Animal",36))))
# Error: group must have the same number of rows as the number of nodes in g.
# Need to convert the strating adjacency matrix to a square matrix using the
# canonical form.
head(sj_list3)
# Plot as a forceDirected Network
#
a<-forceNetwork(Links= sj_list3$links,
Nodes = sj_list3$nodes,
Source = sj_list3$links$source,
Target = sj_list3$links$target,
NodeID = sj_list3$nodes$name,
# Nodes= sj_list3$nodes,
Group = sj_list3$nodes$group,
zoom= TRUE, linkDistance= 200, opacity= 1.6)
# Load packages
require(ggbipart)
require(networkD3)
require(igraph)
require(reshape2)
meta<- read.table("./data/sdw01_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
metam<-as.matrix(meta)
# Getting a square matrix by transforming to canonical form.
dim(metam)
dim(metam)[1]+dim(metam)[2]
# ml<- list(metam,t(metam))
# mm<- bdiag(ml)
# row.names(mm)<- append(row.names(meta),colnames(meta))
# colnames(mm)<- append(row.names(meta),colnames(meta))
g3<- bip_init_igraph(metam)
table(V(g3)$type)
names(nch_attr)        # Datatset with node attributes
V(g3)$species <- as.character(nch_attr$species)
V(g3)$fam <- as.character(nch_attr$family)
V(g3)$spcode <- as.character(nch_attr$spcode)
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
V(g3)$genus<- as.character(nch_attr$genus)
V(g3)$bodymass<- nch_attr$w
V(g3)$frdiam_gape<- nch_attr$g
V(g3)$abund<- nch_attr$a
V(g3)$frugivory<- nch_attr$f
V(g3)$phenology<- nch_attr$ph
V(g3)$phen.forb<- nch_attr$pp
# Convert igraph to list for networkD3
sj_list3 <- igraph_to_networkD3(g3)
sj_list3$nodes <- data.frame(sj_list3$nodes, data.frame(group=c(rep("Plant",26),rep("Animal",36))))
# Error: group must have the same number of rows as the number of nodes in g.
# Need to convert the strating adjacency matrix to a square matrix using the
# canonical form.
head(sj_list3)
# Plot as a forceDirected Network
#
a<-forceNetwork(Links= sj_list3$links,
Nodes = sj_list3$nodes,
Source = sj_list3$links$source,
Target = sj_list3$links$target,
NodeID = sj_list3$nodes$name,
# Nodes= sj_list3$nodes,
Group = sj_list3$nodes$group,
zoom= TRUE, linkDistance= 200, opacity= 1.6)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_binplot.R')
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(ggbipart)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/vectorize.R')
?visnetwork
librray(visnetwork)
library(visnetwork)
?plot.network
devtools::load_all(".")
library(ggbipart)
warnings()
library(ggbipart)
library(ggbipart)
devtools::load_all(".")
library(ggbipart)
?ggbipart
library(ggbipart)
?ggbipart
library(ggbipart)
?ggbipart
library(ggbipart)
?ggbipart
library(ggbipart)
?ggbipart
devtools::install_github("pedroj/bipartite_plots")
devtools::load_all(".")
library(ggbipart)
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
library(ggbipart)
warnings()
library(ggbipart)
detach(package:ggbipart)
devtools::install.github("pedroj/bipartite_plots")
devtools::install_github("pedroj/bipartite_plots")
library(ggbipart)
mymat <- read.delim("./data-raw/data.txt", row.names=1) # Not run.
mymat <- read.delim("./data/data.txt", row.names=1)   # Not run.
g<- bip_railway(mymat, label=T)
g+ coord_flip()
ls()
rm(mymat)
mymat <- read.delim("./data/data.txt", row.names=1)   # Not run.
# Use this to copy from the clipboard, after select/copy the above block.
mymat <- read.table(pipe("pbpaste"), header= T, sep= "\t", row.names= 1)
mymat
write(mymat, file="./data/data.txt", sep=",")
mymat <- read.delim("./data/data.txt", row.names=1)   # Not run.
g<- bip_railway(mymat, label=T)
g+ coord_flip()
# The Nava de las Correhuelas dataset.
nch<- read.table("./data/sdw01_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
# Numbered nodes
nums<- as.vector(c(1:sum(dim(nch))))
pp3<- bip_ggnet(nch.net, as.matrix(nch),
size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
layout.exp = 0.25) +
geom_point(aes(color= color), size= 10,
color= "white") +
geom_point(aes(color= color), size= 10,
alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= nums),
color= "white", size= 3.5,
fontface="bold") +
guides(color= FALSE) +
theme(legend.position="none")        # Hide legend
pp3
require(ggplot2)
require(network)
require(igraph)
require(sna)
require(GGally)        # GGally includes package ggnet.
require(ergm)
require(intergraph)
require(RColorBrewer)
# Installation.
devtools::install_github("pedroj/bipartite_plots")
library(ggbipart)
library(bipartite_plots)
?ggbipart
library(ggbipart)
